#!/usr/bin/env python

import os
import time
from itertools import starmap
from datetime import datetime
from argparse import ArgumentParser

from bonito.util import init, load_data, load_model
from bonito.util import decode_ctc, stitch, identity, palign

import torch
import numpy as np


torch.nn.Module.dump_patches = True

def main(args):

    init(args.seed)
    
    NUM_PREDICTIONS = args.chunks
    PREDICTIONS_PER = args.batch

    print("* loading data")
    chunks, targets, target_lengths = load_data(args.outdir, chunksize=args.chunksize, limit=args.chunks, shuffle=True)

    for w in [int(i) for i in args.weights.split(',')]:
    
        print("* loading model %s" % w)
        model = load_model(args.name, args.device, weights=w)
    
        print("* calling")
    
        p = []

        t0 = time.perf_counter()
    
        with torch.no_grad():
            for i in range(0, int(NUM_PREDICTIONS / PREDICTIONS_PER)):
                tchunks = torch.tensor(np.expand_dims(chunks[i*PREDICTIONS_PER:(i+1)*PREDICTIONS_PER], axis=1))
                predictions = torch.exp(model(tchunks.to(args.device)))
                predictions = predictions.cpu().numpy()
                p.append(predictions)

        predictions = np.concatenate(p)
        
        t1 = time.perf_counter()
        
        references = list(map(stitch, targets))            
        sequences = list(map(decode_ctc, predictions))
        identities = list(starmap(identity, zip(references, sequences)))
        
        print("* time %.3f" % (t1 - t0))
        print("* mean %.3f" % np.mean(identities))
        print("* mode %.3f" % np.median(identities))

        palign(references[0], sequences[0])
        
    
if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("name")
    parser.add_argument("device")
    parser.add_argument("--seed", default=9, type=int)    
    parser.add_argument("--batch", default=100, type=int)
    parser.add_argument("--weights", default=0, type=str)
    parser.add_argument("--chunks", default=500, type=int)
    parser.add_argument("--chunksize", default=2000, type=int)
    parser.add_argument("--outdir", default='/data/training/models/')    
    main(parser.parse_args())
